.modal-enter {
    opacity: 0;
    transform: translateY(-100%);
  }
  .modal-enter-active {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 300ms, transform 300ms;
  }
  .modal-exit {
    opacity: 1;
    transform: translateY(0);
  }
  .modal-exit-active {
    opacity: 0;
    transform: translateY(-100%);
    transition: opacity 300ms, transform 300ms;
  }
  

  /*import React, { useEffect, useRef, useState } from 'react';
import {
  TEModal,
  TEModalDialog,
  TEModalContent,
  TEModalHeader,
  TEModalBody,
  TEModalFooter,
} from "tw-elements-react";
import { userService } from '../../../services/user';
import { Edit, Trash } from 'lucide-react';

const Page = () => {
  const [users, setUsers] = useState([]);
  const flag = useRef(false);
  const [showModal, setShowModal] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);

  const openModal = (user) => {
    setCurrentUser(user);
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setCurrentUser(null);
  };
  
  useEffect(() => {
    if (flag.current === false) {
      userService.getAllUsers()
        .then(res => {
          setUsers(res.data.users);
        })
        .catch(error => console.log(error));
    }
    return () => flag.current = true;
  }, []);

  return (
    <>
      <h5 className="text-lg font-semibold mb-4">Les Utilisateurs</h5>
      <table className="min-w-full bg-white border border-gray-200 table-auto">
        <thead>
          <tr className="bg-gray-100">
            <th className="py-2 px-4 border-b border-gray-200 text-left">#</th>
            <th className="py-2 px-4 border-b border-gray-200 text-left">Name</th>
            <th className="py-2 px-4 border-b border-gray-200 text-left">Email</th>
            <th className="py-2 px-4 border-b border-gray-200 text-left">Date de cr√©ation</th>
            <th className="py-2 px-4 border-b border-gray-200 text-left">Actions</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user, index) => (
            <tr key={index} className="hover:bg-gray-50">
              <td className="py-2 px-4 border-b border-gray-200">{user.id}</td>
              <td className="py-2 px-4 border-b border-gray-200">{user.name}</td>
              <td className="py-2 px-4 border-b border-gray-200">{user.email}</td>
              <td className="py-2 px-4 border-b border-gray-200">{user.created_at}</td>
              <td className="py-2 px-4 border-b border-gray-200">
                <button className="mr-2" onClick={() => openModal(user)}>
                  <Edit className="w-5 h-5 text-blue-500" />
                </button>
                <button>
                  <Trash className="w-5 h-5 text-red-500" />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <TEModal show={showModal} setShow={setShowModal}>
        <TEModalDialog>
          <TEModalContent>
            <TEModalHeader>
              {/* <!--Modal title--> */}
              /*<h5 className="text-xl font-medium leading-normal text-neutral-800 dark:text-neutral-200">
                Modal title
              </h5>*/
              {/* <!--Close button--> */}
              /*<button
                type="button"
                className="box-content rounded-none border-none hover:no-underline hover:opacity-75 focus:opacity-100 focus:shadow-none focus:outline-none"
                onClick={() => closeModal(false)}
                aria-label="Close"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="1.5"
                  stroke="currentColor"
                  className="h-6 w-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </TEModalHeader>*/
            {/* <!--Modal body--> */}
            /*{currentUser && (
            <TEModalBody><form>
                <div>
                  <label>Name</label>
                  <input
                    type="text"
                    defaultValue={currentUser.name}
                    className="border p-2 w-full"
                  />
                </div>
                <div>
                  <label>Email</label>
                  <input
                    type="email"
                    defaultValue={currentUser.email}
                    className="border p-2 w-full"
                  />
                </div>
                <TEModalFooter>
                  <TERipple rippleColor="light">
                    <button
                      type="button"
                      className="inline-block rounded bg-primary-100 px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-primary-700 transition duration-150 ease-in-out hover:bg-primary-accent-100 focus:bg-primary-accent-100 focus:outline-none focus:ring-0 active:bg-primary-accent-200"
                      onClick={() => closeModal(false)}
                    >
                      Close
                    </button>
                  </TERipple>
                  <TERipple rippleColor="light">
                    <button
                      type="button"
                      className="ml-1 inline-block rounded bg-primary px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]"
                    >
                      Save changes
                    </button>
                  </TERipple>
              </TEModalFooter>
              </form></TEModalBody>
              )}
          </TEModalContent>
        </TEModalDialog>
      </TEModal>
    </>
  );
};

export default Page;*/



 {/* <TEModal show={showModal} setShow={setShowModal}>
        <TEModalDialog>
          <TEModalContent>
            {currentUser && ( // Utilisation de la condition currentUser
              <TEModalHeader>
                {/* Modal title *
                <h5 className="text-xl font-medium leading-normal text-neutral-800 dark:text-neutral-200">
                  Modal title
                </h5>
                {/* Close button *
                <button
                  type="button"
                  className="box-content rounded-none border-none hover:no-underline hover:opacity-75 focus:opacity-100 focus:shadow-none focus:outline-none"
                  onClick={() => closeModal()} // Modification de la fonction closeModal
                  aria-label="Close"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="currentColor"
                    className="h-6 w-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                </button>
              </TEModalHeader>
            )}
            {/* Modal body *
            {currentUser && (
              <TEModalBody>
                <form>
                  <div>
                    <label>Name</label>
                    <input
                      type="text"
                      defaultValue={currentUser.name}
                      className="border p-2 w-full"
                    />
                  </div>
                  <div>
                    <label>Email</label>
                    <input
                      type="email"
                      defaultValue={currentUser.email}
                      className="border p-2 w-full"
                    />
                  </div>
                  <TEModalFooter>
                    <button
                      type="button"
                      className="inline-block rounded bg-primary-100 px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-primary-700 transition duration-150 ease-in-out hover:bg-primary-accent-100 focus:bg-primary-accent-100 focus:outline-none focus:ring-0 active:bg-primary-accent-200"
                      onClick={() => closeModal()}
                    >
                      Close
                    </button>
                    <button
                      type="button"
                      className="ml-1 inline-block rounded bg-primary px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[
                        0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]"
                        onClick={() => closeModal()}
                      >
                        Save changes
                      </button>
                    </TEModalFooter>
                  </form>
                </TEModalBody>
              )}
            </TEModalContent>
          </TEModalDialog>
        </TEModal> */}